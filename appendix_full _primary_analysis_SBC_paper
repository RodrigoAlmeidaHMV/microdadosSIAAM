# Definição do local dos arquivos
core_path <- paste(getwd(),"/", sep = "") 
pathtosave <- paste(core_path) 

# Definir vetor com ano(s) para download
ano = c("2018","2019","2020","2021","2022","2023","2024") 

# Definir vetor com meses para download
mes = c("01", 
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "10",
        "11",
        "12")

# Loop pelos anos e meses
for (j in ano) {
  for (k in mes) {
    print(paste("Processando ano:", j, "mês:", k))
   
# Utilização da função “fetch_datasus” do pacote “microdatasus)
    data <- fetch_datasus(
      year_start = as.numeric(j),
      year_end = as.numeric(j),
      month_start = as.numeric(k),
      month_end = as.numeric(k),
      information_system = "SIA-AM"
    )

# Transformação das colunas para o tipo caractere

    data <- data.frame(lapply(data, as.character), stringsAsFactors = FALSE)

# Decodificação da coluna AP_CNSPCN

    data <- data.frame(lapply(data, function(col) {
      if (is.character(col)) {
        return(iconv(col, from = "ISO-8859-1", to = "UTF-8"))
      }
      return(col)
    }), stringsAsFactors = FALSE)

    # Filtro pela coluna AP_CIDPRI para o grupo CID E11

    data$AP_CIDPRI <- trimws(as.character(data$AP_CIDPRI))
    data <- data %>% filter(grepl("^E11", AP_CIDPRI))

    # Salvando o arquivo e limpando o ambiente

    outputfile <- paste0(pathtosave, j, "_", k, ".csv")
    write.csv(data, outputfile, quote = TRUE, row.names = FALSE)
    
    rm(data)
  }
}

# Lista de armazenamento dos bancos

df_list <- list()  

# Função para importação dos bancos
for (j in ano) {
  for (k in mes) {
    file_path <- paste0(pathtosave, j, "_", k, ".csv")

# Lista de armazenamento dos bancos
    if (file.exists(file_path)) {
      df_temp <- read_csv(file_path, col_types = cols(.default = "c"))  # Importa tudo como character
      df_temp$ano <- as.character(j)  # Adiciona coluna com o ano como character
      df_temp$mes <- as.character(k)  # Adiciona coluna com o mês como character
      df_list[[paste0(j, "_", k)]] <- df_temp  # Armazena na lista
      print(paste("Arquivo carregado:", file_path))
    } else {
      print(paste("Arquivo não encontrado:", file_path))
    }
  }
}

# Faz a concatenação dos bancos armazenados na lista
df_final <- bind_rows(df_list)

#Seleção das variáveis de interesse
df_final <- df_final %>%
  select(AP_MVM,AP_CNSPCN, AP_CIDPRI, AP_NUIDADE, AP_SEXO, AM_PESO, AM_ALTURA, AP_RACACOR, AP_PRIPAL)

# Converte colunas para os tipos adequados
df_final <- type_convert(df_final, na = c("", "NA"))

# Conversão da coluna “AP_MVM”
df_final <- df_final %>%
  mutate(
    AP_MVM_data = as.Date(paste0(substr(AP_MVM, 1, 4), "-", substr(AP_MVM, 5, 6), "-01")),  # YYYY-MM-01
    AP_MVM_label = format(AP_MVM_data, "%b/%Y")
  )

# Conversão da coluna “AP_CIDPRI”
if ("AP_CIDPRI" %in% colnames(df_final)) {
  df_final <- df_final %>%
    mutate(AP_CIDPRI = ifelse(nchar(AP_CIDPRI) >= 4,
                              paste0(substr(AP_CIDPRI, 1, 3), ".", substr(AP_CIDPRI, 4, nchar(AP_CIDPRI))),
                              AP_CIDPRI))
}

# Conversão das colunas “AP_NUIDADE”, “AM_PESO”, “AM_ALTURA”
numeric_columns <- c("AP_NUIDADE", "AM_PESO", "AM_ALTURA")
for (col in numeric_columns) {
  if (col %in% colnames(df_final)) {
    df_final[[col]] <- as.numeric(df_final[[col]])
  }
}

# Conversão da coluna “AP_RACACOR”
if ("AP_RACACOR" %in% colnames(df_final)) {
  df_final <- df_final %>%
    mutate(AP_RACACOR = recode(AP_RACACOR,
                               "01" = "Branca",
                               "02" = "Preta",
                               "03" = "Amarela",
                               "04" = "Parda",
                               "05" = "Indígena",
                               "99" = "Sem informação"))
}

# Detectar duplicatas com base nas colunas AP_MVM e AP_CNSPCN
df_final <- df_final %>%
  filter(!duplicated(select(., AP_MVM, AP_CNSPCN)))

# Remover linhas onde AP_CNSPCN está vazio ou NA
df_final <- df_final %>%
  filter(!(is.na(AP_CNSPCN) | AP_CNSPCN == ""))

# Contar valores vazios ou NA em cada coluna
missing_values <- df_final %>%
  summarise_all(~sum(is.na(.) | . == ""))

# Exibir colunas com valores ausentes
missing_values <- missing_values %>% 
  gather(key = "Coluna", value = "Total_vazios") %>% 
  filter(Total_vazios > 0)

# Criação de um segundo banco de registros únicos por paciente para análises descritivas da amostra
df_unique <- df_final %>%
  distinct(AP_CNSPCN, .keep_all = TRUE)

# Definição das variáveis contínuas
variaveis_continuas <- c("AP_NUIDADE", "AM_PESO", "AM_ALTURA")
resultados_continuas <- list()

for (var in variaveis_continuas) {
# Teste de normalidade Kolmogorov-Smirnov
  ks_test <- ks.test(df_unique[[var]], "pnorm", 
                     mean(df_unique[[var]], na.rm = TRUE), 
                     sd(df_unique[[var]], na.rm = TRUE))
  
  # Análises estatísticas
  media <- mean(df_unique[[var]], na.rm = TRUE)
  dp <- sd(df_unique[[var]], na.rm = TRUE)
  mediana <- median(df_unique[[var]], na.rm = TRUE)
  iiq <- quantile(df_unique[[var]], probs = c(0.25, 0.75), na.rm = TRUE)
  
  # Guardar resultados na lista
  resultados_continuas[[var]] <- data.frame(
    Variável = var,
    Normalidade_p = formatC(ks_test$p.value, format = "f", digits = 5),
    Média = media,
    DP = dp,
    Mediana = mediana,
    Q1 = iiq[1],
    Q3 = iiq[2]
  )
}

# Combinar os resultados em um único data frame
tabela_continuas <- bind_rows(resultados_continuas)

# Tabela para a AP_RACACOR
tabela_ap_racacor <- df_unique %>%
  group_by(AP_RACACOR) %>%
  summarise(Frequência_Absoluta = n(), .groups = "drop") %>%
  mutate(Frequência_Relativa = round((Frequência_Absoluta / sum(Frequência_Absoluta)) * 100, 2)) %>%
  mutate(Variável = "AP_RACACOR") %>%
  select(Variável, AP_RACACOR, Frequência_Absoluta, Frequência_Relativa)

# Tabela para a AP_CIDPRI
tabela_ap_cidpri <- df_unique %>%
  group_by(AP_CIDPRI) %>%
  summarise(Frequência_Absoluta = n(), .groups = "drop") %>%
  mutate(Frequência_Relativa = round((Frequência_Absoluta / sum(Frequência_Absoluta)) * 100, 2)) %>%
  mutate(Variável = "AP_CIDPRI") %>%
  select(Variável, AP_CIDPRI, Frequência_Absoluta, Frequência_Relativa)

# Tabela para AP_CIDPRI
tabela_ap_sexo <- df_unique %>%
  group_by(AP_SEXO) %>%
  summarise(Frequência_Absoluta = n(), .groups = "drop") %>%
  mutate(Frequência_Relativa = round((Frequência_Absoluta / sum(Frequência_Absoluta)) * 100, 2)) %>%
  mutate(Variável = "AP_SEXO") %>%
  select(Variável, AP_SEXO, Frequência_Absoluta, Frequência_Relativa)

# Contagem de dispensações por mês
df_contagem <- df_final %>%
  group_by(AP_MVM_data) %>%
  summarise(Contagem = n(), .groups = "drop")

# Gráfico para todo o período
ggplot(df_contagem, aes(x = AP_MVM_data, y = Contagem)) +
  geom_line(group = 1, color = "blue") +
  geom_point(color = "red") +
  labs(
    title = NULL,
    x = "Mês/Ano",
    y = "Número de Disepensações"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  

# Gráfico por ano
df_contagem$ano <- format(df_contagem$AP_MVM_data, "%Y")

ggplot(df_contagem, aes(x = AP_MVM_data, y = Contagem)) +
  geom_line(group = 1, color = "blue") +
  geom_point(color = "red") +
  labs(
    title = NULL,
    x = "Mês/Ano",
    y = "Número de Dispensações"
  ) +
  scale_x_date(labels = scales::date_format("%b/%Y"), breaks = "1 months") +
  facet_wrap(~ ano, scales = "free_x") +  # Divide por ano
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

